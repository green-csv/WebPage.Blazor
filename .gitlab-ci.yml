# The Docker image that will be used to build your app
image: mcr.microsoft.com/dotnet/sdk:8.0

stages:
  - test          # fail fast if unit tests break
  - deploy        # only runs when tests pass

cache:
  key: "$CI_JOB_NAME"
  paths:
    - ~/.nuget/packages   # speed up restores
variables:
  PUBLISH_DIR: "publish"

# ────────────────────────── 1. UNIT TESTS ──────────────────────────
test:
  stage: test
  script:
    - dotnet restore
    - dotnet test WebPage.Blazor.Unit/WebPage.Blazor.Unit.csproj --configuration Release --logger "trx;LogFileName=test-results.trx" --results-directory ./TestResults
  artifacts:
    when: always
    paths:
      - TestResults/test-results.trx           # keep the log even on failure

# ────────────────────────── 2. DEPLOY TO PAGES ─────────────────────
create-pages:
  stage: deploy
  needs: [ "test" ]              # don’t run if tests failed
  pages:
    # The folder that contains the files to be exposed at the Page URL
    publish: $PUBLISH_DIR/wwwroot
  rules:
    # This ensures that only pushes to the default branch will trigger
    # a pages deploy
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH  
  script:
    # build + publish ONLY the main Blazor project
    - dotnet publish WebPage.Blazor/WebPage.Blazor.csproj --configuration Release -o "$PUBLISH_DIR"
    - touch "$PUBLISH_DIR/.nojekyll"
